{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CALT: Computer ALgebra with Transformer","text":"<p>CALT (Computer ALgebra with Transformer) is a simple Python library for learning arithmetic and symbolic computation with Transformer models. It offers a basic Transformer model and training, and non-experts of deep learning (e.g., mathematicians) can focus on constructing datasets to train and evaluate the model. Particularly, users only need to implement an instance generator for their own task.</p>"},{"location":"#installation","title":"Installation","text":"<p>CALT can be installed via <code>pip</code>.  <pre><code>pip install calt-x\n</code></pre></p> <p>We highly recommend the users to use CALT codebase - a comprehensive template repository to build up your own projects using CALT. The quickstart guide can be found in CALT codebase documentation.</p>"},{"location":"#citation","title":"Citation","text":"<p>If you use this code in your research, please cite our paper:</p> <pre><code>@misc{kera2025calt,\n  title={CALT: A Library for Computer Algebra with Transformer},\n  author={Hiroshi Kera and Shun Arawaka and Yuta Sato},\n  year={2025},\n  archivePrefix={arXiv},\n  eprint={2506.08600}\n}\n</code></pre> <p>The following is a small list of such studies from our group. </p> <ul> <li>\"Learning to Compute Gr\u00f6bner Bases,\" Kera et al., 2024</li> <li>\"Computational Algebra with Attention: Transformer Oracles for Border Basis Algorithms,\" Kera and Pelleriti et al., 2025</li> <li>\"Geometric Generality of Transformer-Based Gr\u00f6bner Basis Computation,\" Kambe et al., 2025</li> </ul> <p>Refer to our paper \"CALT: A Library for Computer Algebra with Transformer,\" Kera et al., 2025 for a comprehensive overview.</p>"},{"location":"_quickstart/","title":"Quick Start","text":"<p>This tutorial provides a minimal introduction on how to use the CALT library for learning arithmetic and symbolic computation with Transformer models.\u3000</p> <p>We recommend the users to use CALT codebase as a comprehensive template repository and its documents.</p>"},{"location":"_quickstart/#installation","title":"Installation","text":"<p>CALT can be installed via pip:</p> <pre><code>pip install calt-x\n</code></pre>"},{"location":"_quickstart/#requirements","title":"Requirements","text":"<ul> <li>Python \u2265 3.10</li> </ul>"},{"location":"_quickstart/#basic-usage","title":"Basic Usage","text":"<p>CALT is designed to be simple to use. You only need to implement an instance generator for your task. Here's a basic example for polynomial addition:</p>"},{"location":"_quickstart/#1-define-your-problem-generator","title":"1. Define Your Problem Generator","text":"<pre><code>import random\nfrom typing import List, Tuple\nfrom calt.data_loader import PolynomialSampler\nfrom calt.data_loader.utils import PolyElement\n\nclass SumProblemGenerator:\n    \"\"\"Generator for polynomial addition task.\n\n    Task: input F=[f_1, ..., f_s], target g=f_1+...+f_s\n    \"\"\"\n    def __init__(\n        self, sampler: PolynomialSampler, max_polynomials: int, min_polynomials: int\n    ):\n        self.sampler = sampler\n        self.max_polynomials = max_polynomials  \n        self.min_polynomials = min_polynomials\n\n    def __call__(self, seed: int) -&gt; Tuple[List[PolyElement], PolyElement]:\n        random.seed(seed)  # Set random seed for reproducibility\n        num_polys = random.randint(self.min_polynomials, self.max_polynomials) \n\n        # Generate input polynomials\n        F = self.sampler.sample(num_samples=num_polys)\n\n        # Compute target (sum of polynomials)\n        g = sum(F)\n\n        return F, g\n</code></pre>"},{"location":"_quickstart/#2-set-up-data-generation","title":"2. Set Up Data Generation","text":"<pre><code>from calt.data_loader import PolynomialSampler, DatasetGenerator\n\n# Create a polynomial sampler\nsampler = PolynomialSampler(\n    num_variables=2,\n    max_degree=3,\n    max_coefficient=10\n)\n\n# Create your problem generator\ngenerator = SumProblemGenerator(\n    sampler=sampler,\n    max_polynomials=5,\n    min_polynomials=2\n)\n\n# Create dataset generator\ndataset_generator = DatasetGenerator(\n    generator=generator,\n    num_train_samples=1000,\n    num_test_samples=100,\n    num_workers=4\n)\n</code></pre>"},{"location":"_quickstart/#3-generate-dataset","title":"3. Generate Dataset","text":"<pre><code># Generate training and test datasets\ntrain_dataset, test_dataset = dataset_generator.generate()\n\nprint(f\"Training samples: {len(train_dataset)}\")\nprint(f\"Test samples: {len(test_dataset)}\")\n</code></pre>"},{"location":"_quickstart/#4-train-a-transformer-model","title":"4. Train a Transformer Model","text":"<pre><code>from calt.trainer import CALTTrainer\nfrom calt.models import TransformerConfig\n\n# Configure the Transformer model\nconfig = TransformerConfig(\n    vocab_size=1000,\n    d_model=256,\n    n_heads=8,\n    n_layers=6,\n    d_ff=1024,\n    max_seq_length=512\n)\n\n# Create trainer\ntrainer = CALTTrainer(\n    model_config=config,\n    train_dataset=train_dataset,\n    test_dataset=test_dataset,\n    batch_size=32,\n    learning_rate=1e-4,\n    num_epochs=10\n)\n\n# Start training\ntrainer.train()\n</code></pre>"},{"location":"_quickstart/#advanced-example-custom-problem","title":"Advanced Example: Custom Problem","text":"<p>For more complex tasks, you can define your own problem generator. Here's an example for polynomial multiplication:</p> <pre><code>class MultiplicationProblemGenerator:\n    \"\"\"Generator for polynomial multiplication task.\"\"\"\n\n    def __init__(self, sampler: PolynomialSampler):\n        self.sampler = sampler\n\n    def __call__(self, seed: int) -&gt; Tuple[List[PolyElement], PolyElement]:\n        random.seed(seed)\n\n        # Generate two polynomials\n        f1, f2 = self.sampler.sample(num_samples=2)\n\n        # Compute product\n        product = f1 * f2\n\n        return [f1, f2], product\n</code></pre>"},{"location":"_quickstart/#key-concepts","title":"Key Concepts","text":""},{"location":"_quickstart/#problem-generator-interface","title":"Problem Generator Interface","text":"<p>Your problem generator must implement the <code>__call__</code> method with the following signature:</p> <pre><code>def __call__(self, seed: int) -&gt; Tuple[InputType, OutputType]:\n    # Your implementation here\n    pass\n</code></pre> <ul> <li><code>seed</code>: Random seed for reproducibility</li> <li>Returns: Tuple of (input, target) for your task</li> </ul>"},{"location":"_quickstart/#data-types","title":"Data Types","text":"<p>CALT supports various data types through the <code>PolyElement</code> class and other utilities. The library handles the conversion to token sequences for the Transformer model.</p>"},{"location":"_quickstart/#training-process","title":"Training Process","text":"<p>CALT automatically: 1. Converts your data to token sequences 2. Handles batching and data loading 3. Manages the training loop 4. Provides logging and evaluation metrics</p>"},{"location":"_quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Check out the API Reference for detailed documentation</li> <li>Explore the CALT codebase for more advanced examples</li> <li>See our research papers for applications in computer algebra</li> </ul>"},{"location":"_quickstart/#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues - Report bugs or request features</li> <li>GitHub Discussions - Ask questions and share ideas</li> <li>Demo Notebook - Interactive examples </li> </ul>"},{"location":"demo/a/","title":"A","text":"<p>hogehoge</p>"}]}